// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: gt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GTClient is the client API for GT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GTClient interface {
	GT(ctx context.Context, opts ...grpc.CallOption) (GT_GTClient, error)
	Listen(ctx context.Context, opts ...grpc.CallOption) (GT_ListenClient, error)
}

type gTClient struct {
	cc grpc.ClientConnInterface
}

func NewGTClient(cc grpc.ClientConnInterface) GTClient {
	return &gTClient{cc}
}

func (c *gTClient) GT(ctx context.Context, opts ...grpc.CallOption) (GT_GTClient, error) {
	stream, err := c.cc.NewStream(ctx, &GT_ServiceDesc.Streams[0], "/proto.GT/GT", opts...)
	if err != nil {
		return nil, err
	}
	x := &gTGTClient{stream}
	return x, nil
}

type GT_GTClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type gTGTClient struct {
	grpc.ClientStream
}

func (x *gTGTClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gTGTClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gTClient) Listen(ctx context.Context, opts ...grpc.CallOption) (GT_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &GT_ServiceDesc.Streams[1], "/proto.GT/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &gTListenClient{stream}
	return x, nil
}

type GT_ListenClient interface {
	Send(*ListenRequest) error
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type gTListenClient struct {
	grpc.ClientStream
}

func (x *gTListenClient) Send(m *ListenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gTListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GTServer is the server API for GT service.
// All implementations must embed UnimplementedGTServer
// for forward compatibility
type GTServer interface {
	GT(GT_GTServer) error
	Listen(GT_ListenServer) error
	mustEmbedUnimplementedGTServer()
}

// UnimplementedGTServer must be embedded to have forward compatible implementations.
type UnimplementedGTServer struct {
}

func (UnimplementedGTServer) GT(GT_GTServer) error {
	return status.Errorf(codes.Unimplemented, "method GT not implemented")
}
func (UnimplementedGTServer) Listen(GT_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedGTServer) mustEmbedUnimplementedGTServer() {}

// UnsafeGTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GTServer will
// result in compilation errors.
type UnsafeGTServer interface {
	mustEmbedUnimplementedGTServer()
}

func RegisterGTServer(s grpc.ServiceRegistrar, srv GTServer) {
	s.RegisterService(&GT_ServiceDesc, srv)
}

func _GT_GT_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GTServer).GT(&gTGTServer{stream})
}

type GT_GTServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gTGTServer struct {
	grpc.ServerStream
}

func (x *gTGTServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gTGTServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GT_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GTServer).Listen(&gTListenServer{stream})
}

type GT_ListenServer interface {
	Send(*ListenResponse) error
	Recv() (*ListenRequest, error)
	grpc.ServerStream
}

type gTListenServer struct {
	grpc.ServerStream
}

func (x *gTListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gTListenServer) Recv() (*ListenRequest, error) {
	m := new(ListenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GT_ServiceDesc is the grpc.ServiceDesc for GT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GT",
	HandlerType: (*GTServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GT",
			Handler:       _GT_GT_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _GT_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gt.proto",
}
